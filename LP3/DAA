
1) Fibonacci sequence -

#include<bits/stdc++.h>
using namespace std;

int it(int n){
    if(n<=1){
        return n;
    }
    int f0=0,f1=1,f2;
    for(int i=2;i<=n;i++){
        f2=f0+f1;
        f0=f1;
        f1=f2;
    }
   return f2;
  // TC - O(n)
  // SC - O(1)
}

int rec(int n){
    if(n<=1){
        return n;
    }
    return rec(n-1)+rec(n-2);
    // TC - O(2^n)
    // SC - O(n)
}

int main(){
    int n;
    cout<<"Enter n - ";
    cin>>n;
    cout<<"it - "<<it(n)<<endl;;
    cout<<"rec - "<<rec(n);
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Job Scheduling - 

#include <bits/stdc++.h>
using namespace std;
// A structure to represent a job
struct Job{
    char id;    // Job Id
    int dead;   // Deadline of job
    int profit; // Profit if job is over before or on deadline
};
// Comparator function for sorting jobs
bool comparison(Job a, Job b){
    return (a.profit > b.profit);
}
// Returns maximum profit from jobs
void printJobScheduling(Job arr[], int n){
    // Sort all jobs according to decreasing order of profit
    sort(arr, arr + n, comparison);
    // for(int i=0;i<n;i++){
    //     cout<<arr[i].profit<<endl;
    // }
    int result[n]; // To store result (Sequence of jobs)
    bool slot[n];  // To keep track of free time slots

    // Initialize all slots to be free
    for (int i = 0; i < n; i++)
        slot[i] = false;

    // Iterate through all given jobs
    for (int i = 0; i < n; i++)
    {
        // Find a free slot for this job (Note that we start from the last possible slot)
        for (int j = min(n, arr[i].dead) - 1; j >= 0; j--)
        {
            // Free slot found
            if (slot[j] == false)
            {
                result[j] = i;  // Add this job to result
                slot[j] = true; // Make this slot occupied
                break;
            }
        }
    }
    // Print the result
    for (int i = 0; i < n; i++)
        if (slot[i])
            cout << arr[result[i]].id << " ";
}

int main(){
    Job arr[] = {{'a', 2, 100},
                 {'b', 1, 19},
                 {'c', 2, 27},
                 {'d', 1, 25},
                 {'e', 3, 15}};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Following is maximum profit sequence of jobs \n";
    printJobScheduling(arr, n);
    return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) Fractional Knapsack - 

#include <bits/stdc++.h>
using namespace std;

struct Item{
    int profit, weight;
    Item(int profit, int weight)
    {
        this->profit = profit;
        this->weight = weight;
    }
};

static bool cmp(struct Item a, struct Item b){
    double r1 = (double)a.profit / (double)a.weight;
    double r2 = (double)b.profit / (double)b.weight;
    return r1 > r2;
}

double fractionalKnapsack(int W, struct Item arr[], int N){
    sort(arr, arr + N, cmp);
    double finalvalue = 0.0;
    for (int i = 0; i < N; i++)
    {
        if (arr[i].weight <= W)
        {
            W -= arr[i].weight;
            finalvalue += arr[i].profit;
        }
        else
        {
            finalvalue += arr[i].profit * ((double)W / (double)arr[i].weight);
            break;
        }
    }
    return finalvalue;
}

int main(){
    int W = 50;
    Item arr[] = {{60, 10}, {100, 20}, {120, 30}};
    int N = sizeof(arr) / sizeof(arr[0]);
    
    cout << fractionalKnapsack(W, arr, N);
    return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) 0/1 Knapsack - 

#include <iostream> 
#include <algorithm> 
#include <vector> 
#include <queue> 

using namespace std; 

// class Item { 
// public: 
// 	int value; 
// 	int weight; 
// 	double ratio; 

// 	Item(int value, int weight) { 
// 		this->value = value; 
// 		this->weight = weight; 
// 		this->ratio = (double)value / weight; 
// 	} 
// }; 

// class KnapsackNode { 
// public: 
// 	vector<int> items; 
// 	int value; 
// 	int weight; 

// 	KnapsackNode(vector<int> items, int value, int weight) { 
// 		this->items = items; 
// 		this->value = value; 
// 		this->weight = weight; 
// 	} 
// }; 

// class Knapsack { 
// public: 
// 	int maxWeight; 
// 	vector<Item> items; 

// 	Knapsack(int maxWeight, vector<Item> items) { 
// 		this->maxWeight = maxWeight; 
// 		this->items = items; 
// 	} 

// 	int solve() { 
// 		sort(this->items.begin(), this->items.end(), [](const Item& a, const Item& b) { 
// 			return a.ratio > b.ratio; 
// 		}); 

// 		int bestValue = 0; 
// 		queue<KnapsackNode> q; 
// 		q.push(KnapsackNode({}, 0, 0)); 

// 		while (!q.empty()) { 
// 			KnapsackNode node = q.front(); 
// 			q.pop(); 
// 			int i = node.items.size(); 

// 			if (i == this->items.size()) { 
// 				bestValue = max(bestValue, node.value); 
// 			} else { 
// 				Item item = this->items[i]; 
// 				KnapsackNode withItem(node.items, node.value + item.value, node.weight + item.weight); 
// 				if (isPromising(withItem, this->maxWeight, bestValue)) { 
// 					q.push(withItem); 
// 				} 
// 				KnapsackNode withoutItem(node.items, node.value, node.weight); 
// 				if (isPromising(withoutItem, this->maxWeight, bestValue)) { 
// 					q.push(withoutItem); 
// 				} 
// 			} 
// 		} 

// 		return bestValue; 
// 	} 

// 	bool isPromising(KnapsackNode node, int maxWeight, int bestValue) { 
// 		return node.weight <= maxWeight && node.value + getBound(node) > bestValue; 
// 	} 

// 	int getBound(KnapsackNode node) { 
// 		int remainingWeight = this->maxWeight - node.weight; 
// 		int bound = node.value; 

// 		for (int i = node.items.size(); i < this->items.size(); i++) { 
// 			Item item = this->items[i]; 

// 			if (remainingWeight >= item.weight) { 
// 				bound += item.value; 
// 				remainingWeight -= item.weight; 
// 			} else { 
// 				bound += remainingWeight * item.ratio; 
// 				break; 
// 			} 
// 		} 

// 		return bound; 
// 	} 
// }; 

// int main() { 
// 	vector<Item> items = { 
// 		Item(60, 10), 
// 	Item(100, 20), 
// 	Item(120, 30) 
// 	}; 
// 	Knapsack knapsack(50, items); 
// 	int result = knapsack.solve(); 
// 	cout << "Best value: " << result << endl; 
// 	return 0; 
// } 


// DP

// Function to return max value that can be put in knapsack of capacity W.
// int knapSack(int w, int wt[], int val[], int n)
// {
//     int dp[n + 1][w + 1];
//     for (int i = 0; i < n + 1; i++)
//     {
//         for (int j = 0; j < w + 1; j++)
//         {
//             if (i == 0 || j == 0)
//             {
//                 dp[i][j] = 0;
//             }
//         }
//     }

//     for (int i = 1; i <= n; i++)
//     {
//         for (int j = 1; j <= w; j++)
//         {
//             if (wt[i - 1] <= j)
//             {
//                 dp[i][j] = max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);
//             }
//             else
//             {
//                 dp[i][j] = dp[i - 1][j];
//             }
//         }
//     }
//     return dp[n][w];
// }

// int main()
// {
//     int n, w;
//     cin >> n >> w;

//     int val[n];
//     int wt[n];

//     for (int i = 0; i < n; i++)
//     {
//         cin >> val[i];
//     }
//     for (int i = 0; i < n; i++)
//     {
//         cin >> wt[i];
//     }
//     cout << knapSack(w, wt, val, n) << endl;
// }

typedef long long ll;
int func(int i,int j,vector<int> &val,vector<int> &wt,vector<vector<int>> &dp){
    if(i==0){
        if(wt[i]<=j)return val[i];
        else return 0;
    }
    if(dp[i][j]!=-1)return dp[i][j];
    int notTake=func(i-1,j,val,wt,dp);
    int take=0;
    if(wt[i]<=j){
        take=val[i]+func(i-1,j-wt[i],val,wt,dp);
    }
    return dp[i][j]=max(take,notTake);
}
int knapsack(int n,vector<int>&val,vector<int>&wt,int W){
    vector<vector<int>>dp(n,vector<int>(W+1,-1));
    int ans=func(n-1,W,val,wt,dp);   
    
    return ans;
}

int main(){
    int n,W;
    cin>>n>>W;
    vector<int>val(n),wt(n);
    for(int i=0;i<n;i++){
        cin>>val[i];
    }
    for(int i=0;i<n;i++){
        cin>>wt[i];
    }
    int maxValue=knapsack(n,val,wt,W);
    cout<<maxValue<<endl;
    return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5) N-Queens - 

#include <iostream>
#include <vector>
using namespace std;

const int N = 8;
bool isSafe(vector<vector<int> >& board, int row, int col)
{
	for (int x = 0; x < col; x++)
		if (board[row][x] == 1)
			return false;
	for (int x = row, y = col; x >= 0 && y >= 0; x--, y--)
		if (board[x][y] == 1)
			return false;
	for (int x = row, y = col; x < N && y >= 0; x++, y--)
		if (board[x][y] == 1)
			return false;
	return true;
}

bool solveNQueens(vector<vector<int> >& board, int col)
{
	if (col == N) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				cout << board[i][j] << " ";
			cout << endl;
		}
		cout << endl;
		return true;
	}
	for (int i = 0; i < N; i++) {
		if (isSafe(board, i, col)) {
			board[i][col] = 1;
			if (solveNQueens(board, col + 1))
				return true;
			board[i][col] = 0;
		}
	}
	return false;
}

int main()
{
	vector<vector<int> > board(N, vector<int>(N, 0));
	if (!solveNQueens(board, 0))
		cout << "No solution found";
	return 0;
}
